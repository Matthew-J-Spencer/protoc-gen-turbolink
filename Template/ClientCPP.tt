<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#include "<#=s.TurboLinkBasicFileName#>Client.h"
#include "<#=s.TurboLinkBasicFileName#>Service.h"
#include "<#=s.CamelFileName#>Context.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

<#
foreach(GrpcService service in s.ServiceArray)
{
foreach (GrpcServiceMethod method in service.MethodArray)
{
#>
FGrpcContextHandle U<#=service.Name#>Client::Init<#=method.Name#>()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_<#=service.Name#>_<#=method.Name#>>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
<#if(method.ClientStreaming) {#>
	context->Init();
<#}#>
	return context->GetHandle();
}

void U<#=service.Name#>Client::<#=method.Name#>(FGrpcContextHandle Handle, const <#=method.InputType#>& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto context<#=method.Name#> = StaticCastSharedPtr<GrpcContext_<#=service.Name#>_<#=method.Name#>>(*context);
		context<#=method.Name#>->Call(Request);
	}
}

<#if(method.ClientStreaming && !method.ServerStreaming) {#>
void U<#=service.Name#>Client::Stop<#=method.Name#>(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto context<#=method.Name#> = StaticCastSharedPtr<GrpcContext_<#=service.Name#>_<#=method.Name#>>(*context);
		context<#=method.Name#>->Stop();
	}
}

<#}#>
<#
}
#>
void U<#=service.Name#>Client::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void U<#=service.Name#>Client::Shutdown()
{
<#
foreach (GrpcServiceMethod method in service.MethodArray)
{
#>
	On<#=method.Name#>Response.Clear();
<#
}
#>
	Super::Shutdown();
}

<#
}
#>
