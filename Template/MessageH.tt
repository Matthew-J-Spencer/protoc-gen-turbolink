<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
<#@ import namespace="System.Globalization" #>
//Generated by SLAPS CodeGenerator, do not edit!
#pragma once
// #include "TurboLinkGrpcMessage.h"
#include "FGrpcMessage.h"
<#
    foreach (string dependency in s.DependencyFiles)
    {
#>
#include "<#= dependency #>Message.h"
<#
    }
#>
<#
    if (s.EnumArray.Count > 0 || s.MessageArray.Count > 0)
    {
#>
<#
        if (s.NeedBlueprintFunctionLibrary())
        {
#>
#include "Kismet/BlueprintFunctionLibrary.h"
<#
        }
#>
#include "<#= s.CamelFileName #>Message.generated.h"
<#
    }
#>
<#
    foreach (GrpcEnum enumDefine in s.EnumArray)
    {
#>

UENUM(meta = (DisplayName="<#= enumDefine.DisplayName #>", ScriptName="<#= enumDefine.Name #>"))
enum class <#= enumDefine.Name #> : uint8
{
<#
        if (enumDefine.MissingZeroField)
        {
#>
    _ZERO_RESERVED_FIELD_=0 UMETA(Hidden),
<#
        }
#>
<#
        foreach (GrpcEnumField enumField in enumDefine.Fields)
        {
#>
    <#= enumField.Name #>=<#= enumField.Number #>,
<#
        }
#>
};
<#
    }
#>
<#
    foreach (GrpcMessage message in s.MessageArray)
    {
        if (message.HasNativeMake || message is GrpcMessage_Oneof)
        {
#>

USTRUCT(meta = (DisplayName="<#= message.DisplayName #>"))
<#
        }
        else
        {
#>

USTRUCT(meta = (DisplayName="<#= message.DisplayName #>"))
<#
        }
#>
struct <#= message.Name #> : public FGrpcMessage
{
    GENERATED_BODY()
<#
        if (g.GenerateJsonCode && !(message is GrpcMessage_Oneof))
        {
#>
    DECLARE_JSON_FUNCTIONS()
<#
        }
#>
<#
        if (message is GrpcMessage_Oneof)
        {
            GrpcMessage_Oneof oneofMessage = (GrpcMessage_Oneof)message;
#>

    UPROPERTY()
    <#= oneofMessage.OneofEnum.Name #> <#= oneofMessage.CamelName #>Case;
<#
        }
#>
<#
        foreach (GrpcMessageField field in message.Fields)
        {
            if (field.NeedNativeMake)
            {
#>

    <#= field.TypeAsNativeField #> <#= field.FieldName #>;
<#
            }
            else
            {
#>

    UPROPERTY(EditAnywhere)
    <#= field.FieldType #> <#= field.FieldName #><#= field.FieldDefaultValue #>;
<#
            }
        }
#>
<#
        foreach (var customUnrealComment in message.UnrealCommentFields)
        {
            var trimKeyword = message.CamelName.ToLower();
            if (customUnrealComment.ToLower().StartsWith(message.CamelName.ToLower()))
            {
                // Trim first word:
                var trimmedComment = customUnrealComment.Replace(trimKeyword, "");
#>         <#= trimmedComment #>       
<#
            }
        }
#>

};
<#
    }
#>
