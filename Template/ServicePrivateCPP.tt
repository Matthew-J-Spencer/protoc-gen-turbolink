<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by SLAPS CodeGenerator, do not edit!
#include "<#=s.CamelFileName#>Service_Private.h"

<#
foreach(GrpcService service in s.ServiceArray)
{
	foreach (GrpcServiceMethod method in service.MethodArray)
	{
		if(!method.ClientStreaming) {
#>
void U<#=service.Name#><#=method.Name#>LambdaWrapper::OnResponse(FGrpcContextHandle _Handle, const FGrpcResult& GrpcResult, const <#=method.OutputType#>& Response) const
{
	if (_Handle != this->Handle) {
		UE_LOG(LogTemp, Warning, TEXT("This would have invalidated, but I prevented it. Has anything done wrong?"));
		// return;
	}

	ResponseLambda(GrpcResult, Response);
<#
			if(!method.ServerStreaming) 
			{
#>
	InnerClient->On<#=method.Name#>Response.RemoveAll(this);
<#
			}
#>
}

<#
			if(method.ServerStreaming) 
			{
#>
void U<#=service.Name#><#=method.Name#>LambdaWrapper::OnContextStateChanged(FGrpcContextHandle _Handle, EGrpcContextState NewState)
{
	if (_Handle != this->Handle) return;
	if (NewState == EGrpcContextState::Done)
	{
<# if(method.ServerStreaming) { #>
		FinishLambda();

<#}#>
		InnerClient->On<#=method.Name#>Response.RemoveAll(this);
		InnerClient->OnContextStateChange.RemoveAll(this);
	}
}

<#
			}
		}
	}
}
#>